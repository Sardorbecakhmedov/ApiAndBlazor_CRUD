@page "/create_category"
@inject HttpClient Client
@inject NavigationManager NavigationManager

<h1>Create new category</h1>

@if (IsLoading)
{
    <div class="spinner-border text-primary" role="status">
        <span class="sr-only">Create_Category...</span>
    </div>
}
@*else if (categories is null)
{
   <h1 style="color: red"><em>No information found yet...</em></h1>
}*@
else
{
    <EditForm Model="@_category" OnValidSubmit="@CreateCategoryAsync">
        <DataAnnotationsValidator/>
        <ValidationSummary/>
        
        <div class="form-group">
            <label for="parentId">Parent ID:</label>
            <InputSelect placeholder="Select a parentId" id="parentId" class="form-control" @bind-Value="@_category.ParentId">
                <option value=""> Select a parentId </option>
          
                @foreach (var category in categories)
                {
                    var categ = HelperMethods.GetCategoryNameAndId(category);

                    if (categ != null)
                    {
                        foreach (var item in categ)
                        {
                            if (item != null)
                            {
                                <option value="@item.CategoryId"> @item.CategoryName</option>
                            }
                        }
                    }
                }

            </InputSelect>
        </div>

        <div class="form-group">
            <label for="name">Name:</label>
            <InputText placeholder="Name" id="name" class="form-control" @bind-Value="@_category.Name"/>
        </div>

        <div class="form-group">
            <label for="description">Description:</label>
            <InputTextArea placeholder="Description" id="description" class="form-control" @bind-Value="@_category.Description"/>
        </div>


        <br/>
        <button type="submit" class="btn btn-primary">Create category</button>
        <br/><br/>
        <a href="/get_categories" class="btn btn-secondary">Cancel</a>

    </EditForm>
}

@code {
    private bool IsLoading { get; set; } = false;
    private  CategoryDto _category = new ();
    private IEnumerable<CategoryWithChildrenDto>? categories;

    protected override async Task OnInitializedAsync()
    {
        categories = await Client.GetFromJsonAsync<List<CategoryWithChildrenDto>>("/api/Category");
    }

    public async Task CreateCategoryAsync()
    {
        IsLoading = true;
        await Client.PostAsJsonAsync("/api/Category", _category);
        IsLoading = false;

        NavigationManager.NavigateTo("/get_categories");
    }

}