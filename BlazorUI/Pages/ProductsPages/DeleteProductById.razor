@page "/delete_product_by_id"
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

<h3>Get product by Id</h3>

@if (IsLoading)
{
    <div class="spinner-border text-primary" role="status">
        <span class="sr-only">Get_Product_By_ID...</span>
    </div>
}
else if (products is null)
{
    <h1 style="color: red"><em>Loading...</em></h1>
}
else
{
    <EditForm Model="@getProductById" OnValidSubmit="DeleteProductAsync">
        <DataAnnotationsValidator/>
        <ValidationSummary/>

        <div class="form-group">
            <label for="categoryId">Select a product for delete:</label>
            <InputSelect placeholder="Select a product for delete" id="categoryId" class="form-control" @bind-Value="@getProductById">
                <option> Select a product</option>
                @if (products is not null)
                {
                    foreach (var product in products)
                    {
                        <option value="@product.Id"> @product.Name</option>
                    }
                }
            </InputSelect>
        </div>
        
        <br/>
        <button type="submit" class="btn btn-danger">Delete</button>
    </EditForm>

}


@code {
    private Guid getProductById;
    private List<ProductDto>? products;
    private bool IsLoading { get; set; } = false;

    protected  override async Task OnInitializedAsync()
    {
        IsLoading = true;
        products = await HttpClient.GetFromJsonAsync<List<ProductDto>>($"api/Product");
        IsLoading = false;
    }

    public async Task DeleteProductAsync()
    {
        if (!string.IsNullOrEmpty(getProductById.ToString()))
        {
            IsLoading = true;
            await HttpClient.DeleteAsync($"/api/Product/{getProductById}");
            IsLoading = false;

            NavigationManager.NavigateTo("/get_products");
        }
    }
}
